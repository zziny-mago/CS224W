{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"},"colab":{"name":"CS224W - Colab 1","provenance":[{"file_id":"1p2s0on6nibUYhJnONBWEAwpBlue37Tcc","timestamp":1640693053592},{"file_id":"1b9rZIjD7MUEKwYbXZc3dchTBTpzdrvpd","timestamp":1632181904658},{"file_id":"1Jc5CAEGZIvY0vka3mBdf0tqn2TaJr2O1","timestamp":1610408674518},{"file_id":"1gc6u6hItUKY9uJt6GXHaneSYCMaGcxp1","timestamp":1610395347938},{"file_id":"1CqWY4pk7_VFxi8K8v4asr18ed0Hs8FVA","timestamp":1578441204356}],"collapsed_sections":[],"machine_shape":"hm"}},"cells":[{"cell_type":"markdown","metadata":{"id":"XuXWJLEm2UWS"},"source":["# **CS224W - Colab 1**"]},{"cell_type":"markdown","metadata":{"id":"8gzsP50bF6Gb"},"source":["In this Colab, we will write a full pipeline for **learning node embeddings**.\n","We will go through the following 3 steps.\n","\n","To start, we will load a classic graph in network science, the [Karate Club Network](https://en.wikipedia.org/wiki/Zachary%27s_karate_club). We will explore multiple graph statistics for that graph.\n","\n","We will then work together to transform the graph structure into a PyTorch tensor, so that we can perform machine learning over the graph.\n","\n","Finally, we will finish the first learning algorithm on graphs: a node embedding model. For simplicity, our model here is simpler than DeepWalk / node2vec algorithms taught in the lecture. But it's still rewarding and challenging, as we will write it from scratch via PyTorch.\n","\n","Now let's get started!\n","\n","**Note**: Make sure to **sequentially run all the cells**, so that the intermediate variables / packages will carry over to the next cell"]},{"cell_type":"markdown","metadata":{"id":"Nwwq0nSdmsOL"},"source":["# 1 Graph Basics\n","To start, we will load a classic graph in network science, the [Karate Club Network](https://en.wikipedia.org/wiki/Zachary%27s_karate_club). We will explore multiple graph statistics for that graph."]},{"cell_type":"markdown","metadata":{"id":"FDkpByYYfSzb"},"source":["## Setup\n","We will heavily use NetworkX in this Colab."]},{"cell_type":"code","metadata":{"id":"VWPkJjPAfVNW"},"source":["import networkx as nx"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VqUnYT5qUZYh"},"source":["## Zachary's karate club network\n","\n","The [Karate Club Network](https://en.wikipedia.org/wiki/Zachary%27s_karate_club) is a graph describes a social network of 34 members of a karate club and documents links between members who interacted outside the club."]},{"cell_type":"code","metadata":{"id":"VIETqEfrfy5Y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850250150,"user_tz":-540,"elapsed":13,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"1feed6c2-44ec-4513-ccdf-b36c3fc05b12"},"source":["G = nx.karate_club_graph()\n","\n","# G is an undirected graph\n","type(G)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["networkx.classes.graph.Graph"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"hDvf3nm-ors4","colab":{"base_uri":"https://localhost:8080/","height":319},"executionInfo":{"status":"ok","timestamp":1640850250939,"user_tz":-540,"elapsed":796,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"0637a81c-52fc-423d-d9ac-c7515bcc535e"},"source":["# Visualize the graph\n","nx.draw(G, with_labels = True)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"FX25Y1CrYmgN"},"source":["## Question 1: What is the average degree of the karate club network? (5 Points)"]},{"cell_type":"code","metadata":{"id":"AUhES1VYo3tB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850251247,"user_tz":-540,"elapsed":346,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"7e628611-9da8-4806-dac6-a75ff35a1505"},"source":["def average_degree(num_edges, num_nodes):\n","  # TODO: Implement this function that takes number of edges\n","  # and number of nodes, and returns the average node degree of \n","  # the graph. Round the result to nearest integer (for example \n","  # 3.3 will be rounded to 3 and 3.7 will be rounded to 4)\n","\n","  avg_degree = 0\n","\n","  ############# Your code here ############\n","  avg_degree=round(2*num_edges/num_nodes)\n","  #########################################\n","\n","  return avg_degree\n","\n","num_edges = G.number_of_edges()\n","num_nodes = G.number_of_nodes()\n","print(G.number_of_edges(),G.number_of_nodes())\n","avg_degree = average_degree(num_edges, num_nodes)\n","print(\"Average degree of karate club network is {}\".format(avg_degree))\n","print(G.nodes())"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["78 34\n","Average degree of karate club network is 5\n","[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]\n"]}]},{"cell_type":"markdown","metadata":{"id":"Fk02fD4vYmZI"},"source":["## Question 2: What is the average clustering coefficient of the karate club network? (5 Points)"]},{"cell_type":"code","metadata":{"id":"k15XKEto1aYJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850251248,"user_tz":-540,"elapsed":18,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"ec878d32-2dae-4fa4-c463-e2ce931e724f"},"source":["def average_clustering_coefficient(G):\n","  # TODO: Implement this function that takes a nx.Graph\n","  # and returns the average clustering coefficient. Round \n","  # the result to 2 decimal places (for example 3.333 will\n","  # be rounded to 3.33 and 3.7571 will be rounded to 3.76)\n","\n","  avg_cluster_coef = 0\n","\n","\n","\n","  ############# Your code here ############\n","  ## Note: \n","  ## 1: Please use the appropriate NetworkX clustering function\n","\n","  sum_coefficient=0\n","\n","  for node in G.nodes():\n","    neighbours=[n for n in nx.neighbors(G,node)] #[안에 결과값을 리스트로 만들어줌]\n","    n_neighbors=len(neighbours)\n","    n_links=0\n","    if n_neighbors>1:\n","        for node1 in neighbours:\n","            for node2 in neighbours:\n","                if G.has_edge(node1,node2):\n","                    n_links+=1\n","        n_links/=2 #because n_links is calculated twice\n","        clustering_coefficient=n_links/(0.5*n_neighbors*(n_neighbors-1))\n","        sum_coefficient+=clustering_coefficient\n","        print(clustering_coefficient)\n","    else:\n","        print(node)\n","        print(0)\n","  avg_cluster_coef=round(sum_coefficient/G.number_of_nodes(),2)\n","\n","  #########################################\n","\n","  return avg_cluster_coef\n","\n","avg_cluster_coef = average_clustering_coefficient(G)\n","print(\"Average clustering coefficient of karate club network is {}\".format(avg_cluster_coef))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.15\n","0.3333333333333333\n","0.24444444444444444\n","0.6666666666666666\n","0.6666666666666666\n","0.5\n","0.5\n","1.0\n","0.5\n","0.0\n","0.6666666666666666\n","11\n","0\n","1.0\n","0.6\n","1.0\n","1.0\n","1.0\n","1.0\n","1.0\n","0.3333333333333333\n","1.0\n","1.0\n","1.0\n","0.4\n","0.3333333333333333\n","0.3333333333333333\n","1.0\n","0.16666666666666666\n","0.3333333333333333\n","0.6666666666666666\n","0.5\n","0.2\n","0.19696969696969696\n","0.11029411764705882\n","Average clustering coefficient of karate club network is 0.57\n"]}]},{"cell_type":"markdown","metadata":{"id":"zghQ-AhXYmP4"},"source":["## Question 3: What is the PageRank value for node 0 (node with id 0) after one PageRank iteration? (5 Points)\n","\n","Please complete the code block by implementing the PageRank equation: $r_j = \\sum_{i \\rightarrow j} \\beta \\frac{r_i}{d_i} + (1 - \\beta) \\frac{1}{N}$"]},{"cell_type":"code","metadata":{"id":"BOGdWjNc6O7x","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850251248,"user_tz":-540,"elapsed":13,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"c59d3af2-5d44-46c2-a27d-d0b5770e9fa0"},"source":["def one_iter_pagerank(G, beta, r0, node_id):\n","  # TODO: Implement this function that takes a nx.Graph, beta, r0 and node id.\n","  # The return value r1 is one interation PageRank value for the input node.\n","  # Please round r1 to 2 decimal places.\n","\n","  r1 = 0\n","\n","  ############# Your code here ############\n","  ## Note: \n","  ## 1: You should not use nx.pagerank\n","  node_0_neighbors=[x for x in G.neighbors(0)]\n","  for i in node_0_neighbors:\n","    r1+=beta*(r0/G.degree(i))\n","  r1+=(1-beta)*r0\n","  r1=round(r1,2)\n","\n","  #########################################\n","\n","  return r1\n","\n","beta = 0.8\n","r0 = 1 / G.number_of_nodes()\n","node = 0\n","r1 = one_iter_pagerank(G, beta, r0, node)\n","print(\"The PageRank value for node 0 after one iteration is {}\".format(r1))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The PageRank value for node 0 after one iteration is 0.13\n"]}]},{"cell_type":"markdown","metadata":{"id":"icTcOULeYmIu"},"source":["## Question 4: What is the (raw) closeness centrality for the karate club network node 5? (5 Points)\n","\n","The equation for closeness centrality is $c(v) = \\frac{1}{\\sum_{u \\neq v}\\text{shortest path length between } u \\text{ and } v}$"]},{"cell_type":"code","metadata":{"id":"XbCsq_tl-3ok","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850251249,"user_tz":-540,"elapsed":9,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"89ea7c0e-fe7f-4969-a1e5-a0ed9fea7b77"},"source":["def closeness_centrality(G, node=5):\n","  # TODO: Implement the function that calculates closeness centrality \n","  # for a node in karate club network. G is the input karate club \n","  # network and node is the node id in the graph. Please round the \n","  # closeness centrality result to 2 decimal places.\n","\n","  closeness = 0\n","\n","  ## Note:\n","  ## 1: You can use networkx closeness centrality function.\n","  ## 2: Notice that networkx closeness centrality returns the normalized \n","  ## closeness directly, which is different from the raw (unnormalized) \n","  ## one that we learned in the lecture.\n","\n","  closeness=round(nx.closeness_centrality(G,node,distance='distance'),2)\n","\n","  #########################################\n","\n","  return closeness\n","\n","node = 5\n","closeness = closeness_centrality(G, node=node)\n","print(\"The node 5 has closeness centrality {}\".format(closeness))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The node 5 has closeness centrality 0.38\n"]}]},{"cell_type":"markdown","metadata":{"id":"-MxvowibYl4x"},"source":["# 2 Graph to Tensor\n","We will then work together to transform the graph $G$ into a PyTorch tensor, so that we can perform machine learning over the graph."]},{"cell_type":"markdown","metadata":{"id":"eDA8PosrA-9V"},"source":["## Setup\n","Check if PyTorch is properly installed"]},{"cell_type":"code","metadata":{"id":"ntuPVat_BAf1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850257578,"user_tz":-540,"elapsed":6334,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"e4fc8bd7-e707-4b51-9d93-8adf3bf94fa4"},"source":["import torch\n","print(torch.__version__)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.10.0+cu111\n"]}]},{"cell_type":"markdown","metadata":{"id":"fko_2wSKYlun"},"source":["## PyTorch tensor basics\n","\n","We can generate PyTorch tensor with all zeros, ones or random values."]},{"cell_type":"code","metadata":{"id":"W2ySw3m-A9qF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850257579,"user_tz":-540,"elapsed":25,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"69faf65f-c08f-4383-9ca1-124bfea05f05"},"source":["# Generate 3 x 4 tensor with all ones\n","ones = torch.ones(3, 4)\n","print(ones)\n","\n","# Generate 3 x 4 tensor with all zeros\n","zeros = torch.zeros(3, 4)\n","print(zeros)\n","\n","# Generate 3 x 4 tensor with random values on the interval [0, 1)\n","random_tensor = torch.rand(3, 4)\n","print(random_tensor)\n","\n","# Get the shape of the tensor\n","print(ones.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 1., 1., 1.],\n","        [1., 1., 1., 1.],\n","        [1., 1., 1., 1.]])\n","tensor([[0., 0., 0., 0.],\n","        [0., 0., 0., 0.],\n","        [0., 0., 0., 0.]])\n","tensor([[0.8259, 0.9431, 0.2176, 0.2881],\n","        [0.8677, 0.6089, 0.6930, 0.5650],\n","        [0.9800, 0.7436, 0.2528, 0.2904]])\n","torch.Size([3, 4])\n"]}]},{"cell_type":"markdown","metadata":{"id":"x8mp66eHBxWC"},"source":["PyTorch tensor contains elements for a single data type, the `dtype`."]},{"cell_type":"code","metadata":{"id":"rQiOvKJJBwq4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850257581,"user_tz":-540,"elapsed":18,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"b5d63e72-a3c3-4405-dc52-48b529ea8b2b"},"source":["# Create a 3 x 4 tensor with all 32-bit floating point zeros\n","zeros = torch.zeros(3, 4, dtype=torch.float32)\n","print(zeros.dtype)\n","\n","# Change the tensor dtype to 64-bit integer\n","zeros = zeros.type(torch.long)\n","print(zeros.dtype)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.float32\n","torch.int64\n"]}]},{"cell_type":"markdown","metadata":{"id":"I9EfegIRDkk2"},"source":["## Question 5: Get the edge list of the karate club network and transform it into `torch.LongTensor`. What is the `torch.sum` value of `pos_edge_index` tensor? (10 Points)"]},{"cell_type":"code","metadata":{"id":"kEtVxMFID3ZT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850257932,"user_tz":-540,"elapsed":364,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"05f634be-8c5a-4de3-e9db-44a549d10e6e"},"source":["def graph_to_edge_list(G):\n","  # TODO: Implement the function that returns the edge list of\n","  # an nx.Graph. The returned edge_list should be a list of tuples\n","  # where each tuple is a tuple representing an edge connected \n","  # by two nodes.\n","\n","  edge_list = []\n","\n","  ############# Your code here ############\n","  edge_list=G.edges()\n","  print(type(edge_list))\n","  edge_list = list(G.edges)\n","  print(type(edge_list))\n","  \n","  #########################################\n","\n","  return edge_list\n","\n","def edge_list_to_tensor(edge_list):\n","  # TODO: Implement the function that transforms the edge_list to\n","  # tensor. The input edge_list is a list of tuples and the resulting\n","  # tensor should have the shape [2 x len(edge_list)].\n","\n","  edge_index = torch.tensor([])\n","\n","  ############# Your code here ############\n","  \n","  edge_index=torch.tensor(edge_list)\n","  print(edge_index)\n","  edge_index=torch.transpose(edge_index,1,0) #해당 텐서의 채널순서 바꾸는 법\n","  print(edge_index)\n","  #########################################\n","  \n","\n","  return edge_index\n","\n","pos_edge_list = graph_to_edge_list(G)\n","pos_edge_index = edge_list_to_tensor(pos_edge_list)\n","print(\"The pos_edge_index tensor has shape {}\".format(pos_edge_index.shape))\n","print(\"The pos_edge_index tensor has sum value {}\".format(torch.sum(pos_edge_index)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'networkx.classes.reportviews.EdgeView'>\n","<class 'list'>\n","tensor([[ 0,  1],\n","        [ 0,  2],\n","        [ 0,  3],\n","        [ 0,  4],\n","        [ 0,  5],\n","        [ 0,  6],\n","        [ 0,  7],\n","        [ 0,  8],\n","        [ 0, 10],\n","        [ 0, 11],\n","        [ 0, 12],\n","        [ 0, 13],\n","        [ 0, 17],\n","        [ 0, 19],\n","        [ 0, 21],\n","        [ 0, 31],\n","        [ 1,  2],\n","        [ 1,  3],\n","        [ 1,  7],\n","        [ 1, 13],\n","        [ 1, 17],\n","        [ 1, 19],\n","        [ 1, 21],\n","        [ 1, 30],\n","        [ 2,  3],\n","        [ 2,  7],\n","        [ 2,  8],\n","        [ 2,  9],\n","        [ 2, 13],\n","        [ 2, 27],\n","        [ 2, 28],\n","        [ 2, 32],\n","        [ 3,  7],\n","        [ 3, 12],\n","        [ 3, 13],\n","        [ 4,  6],\n","        [ 4, 10],\n","        [ 5,  6],\n","        [ 5, 10],\n","        [ 5, 16],\n","        [ 6, 16],\n","        [ 8, 30],\n","        [ 8, 32],\n","        [ 8, 33],\n","        [ 9, 33],\n","        [13, 33],\n","        [14, 32],\n","        [14, 33],\n","        [15, 32],\n","        [15, 33],\n","        [18, 32],\n","        [18, 33],\n","        [19, 33],\n","        [20, 32],\n","        [20, 33],\n","        [22, 32],\n","        [22, 33],\n","        [23, 25],\n","        [23, 27],\n","        [23, 29],\n","        [23, 32],\n","        [23, 33],\n","        [24, 25],\n","        [24, 27],\n","        [24, 31],\n","        [25, 31],\n","        [26, 29],\n","        [26, 33],\n","        [27, 33],\n","        [28, 31],\n","        [28, 33],\n","        [29, 32],\n","        [29, 33],\n","        [30, 32],\n","        [30, 33],\n","        [31, 32],\n","        [31, 33],\n","        [32, 33]])\n","tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,\n","          1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  4,\n","          4,  5,  5,  5,  6,  8,  8,  8,  9, 13, 14, 14, 15, 15, 18, 18, 19, 20,\n","         20, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 26, 26, 27, 28, 28, 29,\n","         29, 30, 30, 31, 31, 32],\n","        [ 1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 13, 17, 19, 21, 31,  2,  3,\n","          7, 13, 17, 19, 21, 30,  3,  7,  8,  9, 13, 27, 28, 32,  7, 12, 13,  6,\n","         10,  6, 10, 16, 16, 30, 32, 33, 33, 33, 32, 33, 32, 33, 32, 33, 33, 32,\n","         33, 32, 33, 25, 27, 29, 32, 33, 25, 27, 31, 31, 29, 33, 33, 31, 33, 32,\n","         33, 32, 33, 32, 33, 33]])\n","The pos_edge_index tensor has shape torch.Size([2, 78])\n","The pos_edge_index tensor has sum value 2535\n"]}]},{"cell_type":"markdown","metadata":{"id":"UBL-ZmdHWqIu"},"source":["## Question 6: Please implement following function that samples negative edges. Then answer which edges (edge_1 to edge_5) can be potential negative edges in the karate club network? (10 Points)"]},{"cell_type":"code","source":["!pip install torch_geometric -q\n","!pip install torch-scatter -f https://pytorch-geometric.com/whl/torch-1.10.0+cu111.html -q\n","!pip install torch-sparse -f https://pytorch-geometric.com/whl/torch-1.10.0+cu111.html -q"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LazCRLXc_WPv","executionInfo":{"status":"ok","timestamp":1640850275813,"user_tz":-540,"elapsed":17888,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"ce72b841-c5d1-4682-8545-d231631d9f0a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 370 kB 4.1 MB/s \n","\u001b[K     |████████████████████████████████| 482 kB 52.4 MB/s \n","\u001b[K     |████████████████████████████████| 41 kB 484 kB/s \n","\u001b[?25h  Building wheel for torch-geometric (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[K     |████████████████████████████████| 7.9 MB 5.3 MB/s \n","\u001b[K     |████████████████████████████████| 3.5 MB 5.0 MB/s \n","\u001b[?25h"]}]},{"cell_type":"code","metadata":{"id":"9N8VT1f8-IJ8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850276741,"user_tz":-540,"elapsed":945,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"d898673f-6eda-4526-b0ca-861dee390ff7"},"source":["import random\n","from torch_geometric.utils import negative_sampling\n","\n","def sample_negative_edges(G, pos_edge_index, num_neg_samples):\n","  \n","  neg_edge_list = []\n","\n","  ############# Your code here ############\n","\n","  neg_edge_index = negative_sampling(\n","    edge_index=pos_edge_index, #positive edges\n","    num_nodes=G.number_of_nodes(), # number of nodes\n","    num_neg_samples=len(pos_edge_list)) # number of neg_sample equal to number of pos_edges\n","\n","  #########################################\n","\n","  #return neg_edge_list\n","  return neg_edge_index\n","\n","# 78개의 negative sample얻기\n","#neg_edge_list = sample_negative_edges(G, pos_edge_index, len(pos_edge_list))\n","\n","# neg edge list -> tensor\n","#neg_edge_index = edge_list_to_tensor(neg_edge_list)\n","neg_edge_index = sample_negative_edges(G, pos_edge_index, len(pos_edge_list))\n","print(\"The neg_edge_index tensor has shape {}\".format(neg_edge_index.shape))\n","\n","# Which of following edges can be negative ones?\n","edge_1 = (7, 1)\n","edge_2 = (1, 33)\n","edge_3 = (33, 22)\n","edge_4 = (0, 4)\n","edge_5 = (4, 2)\n","\n","print(neg_edge_index)\n","############# Your code here ############\n","\n","\n","#########################################"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The neg_edge_index tensor has shape torch.Size([2, 78])\n","tensor([[17, 25, 26, 24, 27, 19, 18, 25, 17, 16,  9, 30, 15,  1, 15, 12, 32,  7,\n","          5, 26, 26, 14, 26, 24, 22,  6,  3, 31, 18,  7, 24,  2, 23, 25, 30,  6,\n","         20, 16, 24, 29, 26,  7, 18, 12, 33, 16, 20, 19, 11,  1, 14, 27, 11, 29,\n","          4, 13, 10, 26, 26, 14,  4,  0, 16, 27, 11, 22, 23, 28, 20, 29, 28, 25,\n","         19, 10, 27, 18, 28, 30],\n","        [29,  2, 24, 23, 25, 24,  1,  1, 19, 25, 27, 16, 18, 14,  6,  4, 18,  8,\n","         21, 22, 31, 15, 17,  1, 30, 31,  0, 27,  8, 23,  8, 26, 31,  3, 18, 12,\n","          0, 13, 26, 16, 11, 14, 16,  0,  5, 12, 15, 30,  9, 10, 27, 10, 15,  1,\n","          5, 29, 22, 12,  4,  7, 12, 18, 26, 28,  6, 23, 10,  7, 12, 19, 25,  8,\n","         10, 32, 23,  7,  0, 27]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"Wk9Q-a-9qGsw"},"source":["# 3 Node Emebedding Learning\n","\n","Finally, we will finish the first learning algorithm on graphs: a node embedding model.\n"]},{"cell_type":"markdown","metadata":{"id":"NDBxRQcZ_dUH"},"source":["## Setup"]},{"cell_type":"code","metadata":{"id":"Lnqn9H6s_ehX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850278350,"user_tz":-540,"elapsed":1615,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"6b404b85-a6c4-4648-cedf-3ce2aaa94296"},"source":["import torch\n","import torch.nn as nn\n","import matplotlib.pyplot as plt\n","from sklearn.decomposition import PCA\n","\n","print(torch.__version__)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.10.0+cu111\n"]}]},{"cell_type":"markdown","metadata":{"id":"6gomAf8vxq0R"},"source":["To write our own node embedding learning methods, we'll heavily use the [`nn.Embedding`](https://pytorch.org/docs/stable/generated/torch.nn.Embedding.html) module in PyTorch. Let's see how to use `nn.Embedding`:"]},{"cell_type":"code","metadata":{"id":"aRiWGuLAx5yx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850278354,"user_tz":-540,"elapsed":43,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"d7a846af-3895-49d4-8930-6e5aaea03073"},"source":["# Initialize an embedding layer\n","# Suppose we want to have embedding for 4 items (e.g., nodes)\n","# Each item is represented with 8 dimensional vector\n","\n","emb_sample = nn.Embedding(num_embeddings=4, embedding_dim=8)\n","print('Sample embedding layer: {}'.format(emb_sample))\n","#룩업방식의 임베딩 매트릭스 생성"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sample embedding layer: Embedding(4, 8)\n"]}]},{"cell_type":"markdown","metadata":{"id":"bS9qQfeujEVh"},"source":["We can select items from the embedding matrix, by using Tensor indices"]},{"cell_type":"code","metadata":{"id":"9AGIfP4QEDr8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850278357,"user_tz":-540,"elapsed":41,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"f42725b3-8f9e-4f9d-92f6-2f536257c6f3"},"source":["# Select an embedding in emb_sample\n","id = torch.LongTensor([1])\n","print(emb_sample(id))\n","\n","# Select multiple embeddings\n","ids = torch.LongTensor([1, 3])\n","print(emb_sample(ids))\n","\n","# Get the shape of the embedding weight matrix\n","shape = emb_sample.weight.data.shape\n","print(shape)\n","\n","# Overwrite the weight to tensor with all ones\n","emb_sample.weight.data = torch.ones(shape)\n","\n","# Let's check if the emb is indeed initilized\n","ids = torch.LongTensor([0, 3])\n","print(emb_sample(ids))\n","\n","#매트릭스생성후 랜덤값으로 생성됨 그 값을 보려면 tensor로 인덱스로 접근해야함"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-1.9190, -0.6408, -0.8121, -0.3319, -0.2635,  0.7098,  0.1539, -0.0653]],\n","       grad_fn=<EmbeddingBackward0>)\n","tensor([[-1.9190, -0.6408, -0.8121, -0.3319, -0.2635,  0.7098,  0.1539, -0.0653],\n","        [ 0.4054,  2.0063, -0.9528, -1.4238,  0.1397, -0.0396,  0.2883, -0.5591]],\n","       grad_fn=<EmbeddingBackward0>)\n","torch.Size([4, 8])\n","tensor([[1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1.]], grad_fn=<EmbeddingBackward0>)\n"]}]},{"cell_type":"markdown","metadata":{"id":"8MjBuDKaKIsM"},"source":["Now, it's your time to create node embedding matrix for the graph we have!\n","- We want to have **16 dimensional** vector for each node in the karate club network.\n","- We want to initalize the matrix under **uniform distribution**, in the range of $[0, 1)$. We suggest you using [`torch.rand`](https://pytorch.org/docs/stable/generated/torch.rand.html)."]},{"cell_type":"code","metadata":{"id":"hMszSwRPKGn1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850278360,"user_tz":-540,"elapsed":38,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"92272fa8-4ecb-46c6-9351-7af393a6d575"},"source":["# Please do not change / reset the random seed\n","torch.manual_seed(1)\n","\n","def create_node_emb(num_node=34, embedding_dim=16):\n","  # TODO: Implement this function that will create the node embedding matrix.\n","  # A torch.nn.Embedding layer will be returned. You do not need to change \n","  # the values of num_node and embedding_dim. The weight matrix of returned \n","  # layer should be initialized under uniform distribution. \n","\n","  \n","\n","  emb = None\n","\n","  ############# Your code here ############\n","  \n","  emb=nn.Embedding(34,16)\n","  shape = emb.weight.data.shape\n","\n","  emb.weight.data = torch.rand(shape)\n","\n","  #########################################\n","\n","  return emb\n","\n","emb = create_node_emb()\n","ids = torch.LongTensor([0, 3])\n","\n","# Print the embedding layer\n","print(\"Embedding: {}\".format(emb))\n","\n","# An example that gets the embeddings for node 0 and 3\n","print(emb(ids))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Embedding: Embedding(34, 16)\n","tensor([[0.2114, 0.7335, 0.1433, 0.9647, 0.2933, 0.7951, 0.5170, 0.2801, 0.8339,\n","         0.1185, 0.2355, 0.5599, 0.8966, 0.2858, 0.1955, 0.1808],\n","        [0.7486, 0.6546, 0.3843, 0.9820, 0.6012, 0.3710, 0.4929, 0.9915, 0.8358,\n","         0.4629, 0.9902, 0.7196, 0.2338, 0.0450, 0.7906, 0.9689]],\n","       grad_fn=<EmbeddingBackward0>)\n"]}]},{"cell_type":"markdown","metadata":{"id":"4QfoANibTzyh"},"source":["## Visualize the initial node embeddings\n","One good way to understand an embedding matrix, is to visualize it in a 2D space.\n","Here, we have implemented an embedding visualization function for you.\n","We first do PCA to reduce the dimensionality of embeddings to a 2D space.\n","Then we visualize each point, colored by the community it belongs to."]},{"cell_type":"code","metadata":{"id":"_LCoIkarhfYD","colab":{"base_uri":"https://localhost:8080/","height":392},"executionInfo":{"status":"ok","timestamp":1640850278832,"user_tz":-540,"elapsed":505,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"e4799e59-055d-4fad-e7e9-7df6a8765928"},"source":["def visualize_emb(emb):\n","  X = emb.weight.data.numpy()\n","  pca = PCA(n_components=2)\n","  components = pca.fit_transform(X) #2차원 변환\n","  plt.figure(figsize=(6, 6))\n","  club1_x = []\n","  club1_y = []\n","  club2_x = []\n","  club2_y = []\n","  for node in G.nodes(data=True):\n","    if node[1]['club'] == 'Mr. Hi':\n","      club1_x.append(components[node[0]][0])\n","      club1_y.append(components[node[0]][1])\n","    else:\n","      club2_x.append(components[node[0]][0])\n","      club2_y.append(components[node[0]][1])\n","  plt.scatter(club1_x, club1_y, color=\"red\", label=\"Mr. Hi\")\n","  plt.scatter(club2_x, club2_y, color=\"blue\", label=\"Officer\")\n","  plt.legend()\n","  plt.show()\n","\n","# Visualize the initial random embeddding\n","visualize_emb(emb)\n","torch.manual_seed(1)\n","a=torch.rand(3,4)\n","print(a[0])"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["tensor([0.7576, 0.2793, 0.4031, 0.7347])\n"]}]},{"cell_type":"markdown","metadata":{"id":"bQIyuEz9ANb2"},"source":["## Question 7: Training the embedding! What is the best performance you can get? Please report both the best loss and accuracy on Gradescope. (20 Points)\n","\n","We want to optimize our embeddings for the task of classifying edges as positive or negative. Given an edge and the embeddings for each node, the dot product of the embeddings, followed by a sigmoid, should give us the likelihood of that edge being either positive (output of sigmoid > 0.5) or negative (output of sigmoid < 0.5).\n","\n","Note that we're using the functions you wrote in the previous questions, _as well as the variables initialized in previous cells_. If you're running into issues, make sure your answers to questions 1-6 are correct."]},{"cell_type":"code","metadata":{"id":"RDeQTNNxqH0j","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640850278835,"user_tz":-540,"elapsed":24,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"a6e5b7d3-356f-4035-cd60-0eaf302a1acc"},"source":["from torch.optim import SGD\n","import torch.nn as nn\n","\n","def accuracy(pred, label):\n","\n","  accu = 0.0\n","\n","  ############# Your code here ############\n","\n","  n = len(pred)\n","  tp = 0\n","  tn = 0\n","  for i in range(n):\n","      if (pred[i] > 0.5):\n","          if label[i] == 1:\n","              tp += 1\n","      else:\n","          if label[i] == 0:\n","              tn += 1\n","    \n","  accu = (tp + tn) / n\n","  accu = round(accu, 4)\n","\n","  #########################################\n","\n","  return accu\n","\n","def train(emb, loss_fn, sigmoid, train_label, train_edge):\n","  \n","\n","  epochs = 150\n","  learning_rate = 0.1\n","\n","  optimizer = SGD(emb.parameters(), lr=learning_rate, momentum=0.9)\n","  for i in range(epochs):\n","\n","    ############# Your code here ############\n","    \n","    optimizer.zero_grad()\n","\n","    out = emb(train_edge) #2,156,16\n","    #out[0]->156,16 /out[1].T->16,156\n","    out = torch.matmul(out[0], out[1].T)[14] #out->156,156, torch.matmul(out[0], out[1].T)[0]:156\n","    #자기가 원하는 노드를 정해(u) u랑 모든 다른 노드내적 이웃한것과 이웃하지 않은 네거티브까지 \n","    #그럼 총 156개의 내적결과가생김 그걸로 학습\n","    out = sigmoid(out)\n","    acc = accuracy(out, train_label)\n","    loss = loss_fn(out, train_label)\n","\n","    if i % 10 == 0:\n","        print(f\"epochs: {i}, loss: {loss:.4f}, accuracy: {acc}\")\n","\n","    loss.backward()\n","    optimizer.step()\n","    \n","    #########################################\n","\n","loss_fn = nn.BCELoss()\n","sigmoid = nn.Sigmoid()\n","\n","print(pos_edge_index.shape)\n","\n","\n","pos_label = torch.ones(pos_edge_index.shape[1], )\n","neg_label = torch.zeros(neg_edge_index.shape[1], )\n","\n","train_label = torch.cat([pos_label, neg_label], dim=0)\n","\n","\n","train_edge = torch.cat([pos_edge_index, neg_edge_index], dim=1)\n","print(train_edge.shape)\n","\n","train(emb, loss_fn, sigmoid, train_label, train_edge)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([2, 78])\n","torch.Size([2, 156])\n","epochs: 0, loss: 1.8958, accuracy: 0.5\n","epochs: 10, loss: 1.0093, accuracy: 0.4744\n","epochs: 20, loss: 0.7226, accuracy: 0.5\n","epochs: 30, loss: 0.6338, accuracy: 0.6667\n","epochs: 40, loss: 0.6002, accuracy: 0.6859\n","epochs: 50, loss: 0.5827, accuracy: 0.6987\n","epochs: 60, loss: 0.5710, accuracy: 0.6987\n","epochs: 70, loss: 0.5619, accuracy: 0.7115\n","epochs: 80, loss: 0.5546, accuracy: 0.7115\n","epochs: 90, loss: 0.5485, accuracy: 0.7115\n","epochs: 100, loss: 0.5435, accuracy: 0.7115\n","epochs: 110, loss: 0.5393, accuracy: 0.7179\n","epochs: 120, loss: 0.5357, accuracy: 0.7179\n","epochs: 130, loss: 0.5325, accuracy: 0.7179\n","epochs: 140, loss: 0.5298, accuracy: 0.7179\n"]}]},{"cell_type":"markdown","metadata":{"id":"WX2PSXnTDiNi"},"source":["## Visualize the final node embeddings\n","Visualize your final embedding here! \n","You can visually compare the figure with the previous embedding figure. \n","After training, you should oberserve that the two classes are more evidently separated. \n","This is a great sanitity check for your implementation as well."]},{"cell_type":"code","metadata":{"id":"MtNgl4VhYKow","colab":{"base_uri":"https://localhost:8080/","height":374},"executionInfo":{"status":"ok","timestamp":1640850278837,"user_tz":-540,"elapsed":20,"user":{"displayName":"홍석진","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWsKR5BQFgrVhKytILUNqHTitdZk9PKS84zA8C-Q=s64","userId":"04802553126342625973"}},"outputId":"b37397de-6619-4f9c-d30c-66e047969694"},"source":["# Visualize the final learned embedding\n","visualize_emb(emb)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"FTNyrAoSVeq9"},"source":["# Submission"]},{"cell_type":"markdown","metadata":{"id":"E_E7J_GkVhY_"},"source":["In order to get credit, you must go submit your answers on Gradescope."]},{"cell_type":"code","source":[""],"metadata":{"id":"2DLlWA1yELqV"},"execution_count":null,"outputs":[]}]}